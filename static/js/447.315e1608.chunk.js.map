{"version":3,"file":"static/js/447.315e1608.chunk.js","mappings":"mPACA,EAA4B,yB,uCCyD5B,MAnDA,WACE,OAA0BA,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAcG,GAAd,WACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAe,mCAAG,6GAEDC,EAAAA,EAAwBJ,GAFvB,OAEdK,EAFc,OAGpBP,EAASO,EAAKC,SAHM,gDAKpBP,EAAS,KAAMQ,SALK,yDAAH,qDASrBJ,GAXoB,CAYrB,GAAE,CAACH,IAECH,GAIH,+BACE,eAAIW,UAAWC,EAAf,SACGZ,EAAMa,OAAS,EACdb,EAAMc,KAAI,SAAAC,GACR,IAAMC,EAAcD,EAAdC,IAAKC,EAASF,EAATE,KACPC,EAAQ,wCAAoCF,GAChD,OACE,yBACE,mBACEG,MAAM,MACNC,OAAO,MACPC,IAAKH,EACLI,MAAOL,EACPM,MAAM,sGACNC,iBAAe,MAPVC,EAAAA,EAAAA,MAWZ,KAED,kFAvBC,SAACC,EAAA,EAAD,GA4BV,C,gNCvDKC,E,QAAgBC,EAAAA,OAAa,CACjCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAAcM,IAAI,oBADV,uBACvBzB,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjB0B,EAAe,mCAAG,WAAMC,GAAN,yFACNR,EAAcM,IAAI,eAAgB,CACvDH,OAAQ,CACNK,MAAOA,EACPC,SAAU,QACVC,KAAM,EACNC,eAAe,KANU,uBACrB9B,EADqB,EACrBA,KADqB,kBAUtBA,GAVsB,2CAAH,sDAaf+B,EAAgB,mCAAG,WAAMpC,GAAN,yFACPwB,EAAcM,IAAd,gBAA2B9B,GAAW,CAC3D2B,OAAQ,CACNM,SAAU,WAHgB,uBACtB5B,EADsB,EACtBA,KADsB,kBAOvBA,GAPuB,2CAAH,sDAUhBgC,EAAa,mCAAG,WAAMrC,GAAN,yFACJwB,EAAcM,IAAd,gBAA2B9B,EAA3B,YAA8C,CACnE2B,OAAQ,CACNM,SAAU,WAHa,uBACnB5B,EADmB,EACnBA,KADmB,kBAOpBA,GAPoB,2CAAH,sDAUbiC,EAAgB,mCAAG,WAAMtC,GAAN,yFACPwB,EAAcM,IAAd,gBAA2B9B,EAA3B,YAA8C,CACnE2B,OAAQ,CACNM,SAAU,QACVC,KAAM,KAJoB,uBACtB7B,EADsB,EACtBA,KADsB,kBAQvBA,GARuB,2CAAH,sDAWhBkC,EAAc,mCAAG,WAAMvC,GAAN,yFACLwB,EAAcM,IAAd,gBAA2B9B,EAA3B,WAA6C,CAClE2B,OAAQ,CACNM,SAAU,QACVC,KAAM,KAJkB,uBACpB7B,EADoB,EACpBA,KADoB,kBAQrBA,GARqB,2CAAH,qD,wDCzDpB,IAkBIiB,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Video/Video.module.css?d8e8","pages/Video/Video.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"VideoList\":\"Video_VideoList__AEYX0\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Video.module.css';\nimport * as movieAPI from '../../services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { nanoid } from 'nanoid';\n\nfunction VideoPage() {\n  const [video, setVideo] = useState(null);\n  // eslint-disable-next-line no-unused-vars\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieVideo = async () => {\n      try {\n        const data = await movieAPI.getVideoMovies(movieId);\n        setVideo(data.results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    fetchMovieVideo();\n  }, [movieId]);\n\n  if (!video) {\n    return <Loader />;\n  }\n  return (\n    <>\n      <ul className={css.VideoList}>\n        {video.length > 0 ? (\n          video.map(element => {\n            let { key, name } = element;\n            let urlVideo = `https://www.youtube.com/embed/${key}`;\n            return (\n              <li key={nanoid()}>\n                <iframe\n                  width=\"300\"\n                  height=\"200\"\n                  src={urlVideo}\n                  title={name}\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                  allowfullscreen\n                ></iframe>\n              </li>\n            );\n          })\n        ) : (\n          <p>Unfortunately there is no trailer for this movie.</p>\n        )}\n      </ul>\n    </>\n  );\n}\nexport default VideoPage;\n","import axios from 'axios';\n\nconst themoviedbApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'a3d945b8f328c6538b57f110a6218b6e',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await themoviedbApi.get('trending/all/day');\n  return data;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await themoviedbApi.get('search/movie', {\n    params: {\n      query: query,\n      language: 'en-US',\n      page: 1,\n      include_adult: false,\n    },\n    //`search/movie${query}&language=en-US&page=1&include_adult=false`\n  });\n  return data;\n};\n\nexport const getDetailsMovies = async movieId => {\n  const { data } = await themoviedbApi.get(`movie/${movieId}`, {\n    params: {\n      language: 'en-US',\n    },\n    //https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n  });\n  return data;\n};\n\nexport const getCastMovies = async movieId => {\n  const { data } = await themoviedbApi.get(`movie/${movieId}/credits`, {\n    params: {\n      language: 'en-US',\n    },\n    //https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n  });\n  return data;\n};\n\nexport const getReviewsMovies = async movieId => {\n  const { data } = await themoviedbApi.get(`movie/${movieId}/reviews`, {\n    params: {\n      language: 'en-US',\n      page: 1,\n    },\n    //https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n  });\n  return data;\n};\n\nexport const getVideoMovies = async movieId => {\n  const { data } = await themoviedbApi.get(`movie/${movieId}/videos`, {\n    params: {\n      language: 'en-US',\n      page: 1,\n    },\n    //https://api.themoviedb.org/3/movie/{movie_id}/videos?api_key=<<api_key>>&language=en-US\n  });\n  return data;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","video","setVideo","setError","movieId","useParams","useEffect","fetchMovieVideo","movieAPI","data","results","message","className","css","length","map","element","key","name","urlVideo","width","height","src","title","allow","allowfullscreen","nanoid","Loader","themoviedbApi","axios","baseURL","params","api_key","getTrendingMovies","get","getSearchMovies","query","language","page","include_adult","getDetailsMovies","getCastMovies","getReviewsMovies","getVideoMovies","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}